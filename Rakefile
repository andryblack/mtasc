WGET_VERSION = "1.11.4"
PCRE_VERSION = "8.33"
OCAML_VERSION = "4.02.0"
OCAML_DIR = "4.02"
GODI_VERSION = "skylift-20121022"
PREFIX = "/Users/andry/root"
#OCAML_PREFIX = "#{PREFIX}/opt/godi"
OCAML_PREFIX = "#{PREFIX}"
CAMLP4_REV = "a75e107ff20657167c1b51e59026c456bdc95d46"

desc "Remove cruft generated by compilation"
task :clean do
  files_to_clean = File.read('.gitignore').split("\n").map { |i| "**/#{i}"}
  p files_to_clean
  Dir.glob(files_to_clean).each do |file|
    rm file if !File.directory? file
  end
  system('rm -Rf tmp')
end

desc "Install all required tools for compilation"
task :setup do
  mkdir_p "tmp"
  Dir.chdir("tmp") do
    # wget
    if File.exist? "#{PREFIX}/bin/wget"
      puts "wget is already installed"
    else
      if !File.exist? "wget-#{WGET_VERSION}.tar.bz2"
        system("curl -a -O http://ftp.gnu.org/gnu/wget/wget-#{WGET_VERSION}.tar.bz2")
      end
      system("bunzip2 wget-#{WGET_VERSION}.tar.bz2")
      system("tar xf wget-#{WGET_VERSION}.tar")
      Dir.chdir("wget-#{WGET_VERSION}") do
        system("./configure --prefix #{PREFIX}")
        system("make install")
      end
    end

    # pcre
    if File.exist? "#{PREFIX}/bin/pcregrep"
      puts "pcre is already installed"
    else
      if !File.exist? "pcre-#{PCRE_VERSION}.tar.bz2"
        system("curl -a -O ftp://ftp.csx.cam.ac.uk/pub/software/programming/pcre/pcre-#{PCRE_VERSION}.tar.bz2")
      end
      system("bunzip2 pcre-#{PCRE_VERSION}.tar.bz2")
      system("tar xf pcre-#{PCRE_VERSION}.tar")
      Dir.chdir("pcre-#{PCRE_VERSION}") do
        system("./configure --prefix #{PREFIX}")
        system("make install")
      end
    end

    # ocaml
    if File.exist? "#{OCAML_PREFIX}/bin/ocaml"
      puts "OCAML is already installed"
    else
      if !File.exist? "ocaml-#{OCAML_VERSION}.tar.gz"
        system("curl -a -O http://caml.inria.fr/pub/distrib/ocaml-#{OCAML_DIR}/ocaml-#{OCAML_VERSION}.tar.gz")
      end
      system("tar xvzf ocaml-#{OCAML_VERSION}.tar.gz")
      mkdir_p "ocaml"
      Dir.chdir("ocaml-#{OCAML_VERSION}") do
        system("./configure --prefix #{OCAML_PREFIX}")
        system("make world.opt -j4")
        system("make install")
      end
    end

    # camlp4
    if File.exist? "#{OCAML_PREFIX}/bin/camlp4c"
      puts "camlp4 is already installed"
    else
      if !File.exist? "camlp4/README.md"
        system("git clone https://github.com/ocaml/camlp4.git")
      end
      Dir.chdir("camlp4") do
        system("git checkout #{CAMLP4_REV}")
        system("./configure --bindir=#{OCAML_PREFIX}/bin --libdir=#{OCAML_PREFIX}/lib --pkgdir=${OCAML_PREFIX}/lib/ocaml")
        system("make all")
        system("make install")
      end
    end

  end
end

def version
  File.read("VERSION").chomp
end

desc "Compile MTASC"
task :compile => :setup do
  system("PATH=#{OCAML_PREFIX}/bin:#{OCAML_PREFIX}/sbin:$PATH && ocaml install.ml")
end

desc "Package MTASC for release"
task :package => :compile do
  system("rm -Rf pkg/#{version}") if File.exist?("pkg/#{version}")
  mkdir_p "pkg/#{version}"
  system("cp -R bin/mtasc* pkg/#{version}/")
  system("cp LICENSE pkg/#{version}/")
  system("cp LICENSE pkg/#{version}/")
  system("cp -R src/mtasc/std* pkg/#{version}/")
end

desc "Install MTASC to #{PREFIX}"
task :install => :compile do
  system("rm #{PREFIX}/bin/mtasc")
  system("cp bin/mtasc #{PREFIX}/bin/mtasc-#{version}")
  system("ln -s #{PREFIX}/bin/mtasc-#{version} #{PREFIX}/bin/mtasc")
  system("cp -R src/mtasc/std* #{PREFIX}/bin/")
end

task :default => :compile
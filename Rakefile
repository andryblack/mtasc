PREFIX = "#{Dir.home}/mtasc"

WGET_VERSION = "1.11.4"
PCRE_VERSION = "8.33"
OCAML_VERSION = "4.02.0"
OCAML_DIR = "4.02"
CAMLP4_BRANCH = "4.02"
CAMLP4_REF = "a75e107"
#OCAML_PREFIX = "#{PREFIX}/opt/godi"
OCAML_PREFIX = "#{PREFIX}"
#CAMLP4_REV = "a75e107ff20657167c1b51e59026c456bdc95d46"
SWFMILL_VERSION = "0.3.3"
LIBPNG_VERSION = "1.6.12"
FREETYPE_VERSION = "2.5.3"


desc "Remove cruft generated by compilation"
task :clean do
  files_to_clean = File.read('.gitignore').split("\n").map { |i| "**/#{i}"}
  p files_to_clean
  Dir.glob(files_to_clean).each do |file|
    rm file if !File.directory? file
  end
  system('rm -Rf tmp')
end

desc "Install all required tools for compilation"
task :setup do
  mkdir_p "tmp"
  Dir.chdir("tmp") do
    # wget
    if File.exist? "#{PREFIX}/bin/wget"
      puts "wget is already installed"
    else
      if !File.exist? "wget-#{WGET_VERSION}.tar.bz2"
        system("curl -a -O http://ftp.gnu.org/gnu/wget/wget-#{WGET_VERSION}.tar.bz2")
      end
      system("bunzip2 wget-#{WGET_VERSION}.tar.bz2")
      system("tar xf wget-#{WGET_VERSION}.tar")
      Dir.chdir("wget-#{WGET_VERSION}") do
        system("./configure --prefix #{PREFIX}")
        system("make -j4")
        system("make install")
      end
    end

    # pcre
    if File.exist? "#{PREFIX}/bin/pcregrep"
      puts "pcre is already installed"
    else
      if !File.exist? "pcre-#{PCRE_VERSION}.tar.bz2"
        system("curl -a -O ftp://ftp.csx.cam.ac.uk/pub/software/programming/pcre/pcre-#{PCRE_VERSION}.tar.bz2")
      end
      system("bunzip2 pcre-#{PCRE_VERSION}.tar.bz2")
      system("tar xf pcre-#{PCRE_VERSION}.tar")
      Dir.chdir("pcre-#{PCRE_VERSION}") do
        system("./configure --prefix #{PREFIX}")
        system("make -j4")
        system("make install")
      end
    end

    # ocaml
    if File.exist? "#{OCAML_PREFIX}/bin/ocaml"
      puts "OCAML is already installed"
    else
      if !File.exist? "ocaml-#{OCAML_VERSION}.tar.gz"
        system("curl -a -O http://caml.inria.fr/pub/distrib/ocaml-#{OCAML_DIR}/ocaml-#{OCAML_VERSION}.tar.gz")
      end
      system("tar xvzf ocaml-#{OCAML_VERSION}.tar.gz")
      mkdir_p "ocaml"
      Dir.chdir("ocaml-#{OCAML_VERSION}") do
        system("./configure --prefix #{OCAML_PREFIX}")
        system("make world.opt -j4")
        system("make install")
      end
    end

    # camlp4
    if File.exist? "#{OCAML_PREFIX}/bin/camlp4"
      puts "camlp4 is already installed"
    else
      if !File.exist? "ocaml-camlp4-#{CAMLP4_REF}.tar.gz"
        system("curl -L https://github.com/ocaml/camlp4/tarball/#{CAMLP4_REF} > ocaml-camlp4-#{CAMLP4_REF}.tar.gz" )
      end
      system("rm -Rf ocaml-camlp4-#{CAMLP4_REF}")
      system("tar xvzf ocaml-camlp4-#{CAMLP4_REF}.tar.gz")
      Dir.chdir("ocaml-camlp4-#{CAMLP4_REF}") do
        system("PATH=#{OCAML_PREFIX}/bin:#{OCAML_PREFIX}/sbin:$PATH ./configure --bindir=#{OCAML_PREFIX}/bin --libdir=#{OCAML_PREFIX}/lib --pkgdir=#{OCAML_PREFIX}/lib/ocaml") or exit!(1)
        system("PATH=#{OCAML_PREFIX}/bin:#{OCAML_PREFIX}/sbin:$PATH make all") or exit!(1)
        system("PATH=#{OCAML_PREFIX}/bin:#{OCAML_PREFIX}/sbin:$PATH make install") or exit!(1)
      end
    end

    # libpng
    if File.exist? "#{PREFIX}/lib/libpng.a"
      puts "libpng is already installed"
    else

      if !File.exist? "libpng-#{LIBPNG_VERSION}.tar.gz"
        system("curl -L -a -O http://download.sourceforge.net/libpng/libpng-#{LIBPNG_VERSION}.tar.gz")
      end
      system("tar xvzf libpng-#{LIBPNG_VERSION}.tar.gz")
      Dir.chdir("libpng-#{LIBPNG_VERSION}") do
        system("./configure --prefix=#{PREFIX} --disable-shared --enable-static")
        system("make all -j4")
        system("make install")
      end
    end


    # freetype
    if File.exist? "#{PREFIX}/lib/libfreetype.a"
      puts "freetype is already installed"
    else
      if !File.exist? "freetype-#{FREETYPE_VERSION}.tar.bz2"
          system("curl -a -O http://public.p-knowledge.co.jp/Savannah-nongnu-mirror//freetype/freetype-#{FREETYPE_VERSION}.tar.bz2")
      end
      system("tar xvjf freetype-#{FREETYPE_VERSION}.tar.bz2")
      Dir.chdir("freetype-#{FREETYPE_VERSION}") do
        system("rm -Rf _build")
        system("PATH=#{PREFIX}/bin:$PATH ./configure --prefix=#{PREFIX} --disable-shared --enable-static")
        system("make all -j4")
        system("make install")
      end
    end

    

    

    # swfmill
    if File.exist? "#{PREFIX}/bin/swfmill"
      puts "swfmill is already installed"
    else
      if !File.exist? "swfmill-#{SWFMILL_VERSION}.tar.gz"
        system("curl -a -O http://swfmill.org/releases/swfmill-#{SWFMILL_VERSION}.tar.gz")
      end
      system("tar xvzf swfmill-#{SWFMILL_VERSION}.tar.gz")
      Dir.chdir("swfmill-#{SWFMILL_VERSION}") do
        system("patch -p1 < ../../swfmill/fix_ft_include.patch")
        system("PATH=#{PREFIX}/bin:$PATH ./configure --prefix=#{PREFIX} --disable-shared --enable-static" +
           " FREETYPE_CFLAGS=\"`#{PREFIX}/bin/freetype-config --cflags`\" " +
           " FREETYPE_LIBS=\"`#{PREFIX}/bin/freetype-config --libs`\" " + 
           " PNG_CFLAGS=\"`#{PREFIX}/bin/libpng-config --cflags`\" " +
           " PNG_LIBS=\"`#{PREFIX}/bin/libpng-config --libs`\" ")
        system("make all -j4")
        system("make install")
      end
    end

  end
end

def version
  File.read("VERSION").chomp
end

desc "Compile MTASC"
task :compile => :setup do
  system("PATH=#{OCAML_PREFIX}/bin:#{OCAML_PREFIX}/sbin:$PATH && ocaml install.ml")
end

desc "Package MTASC for release"
task :package => :compile do
  system("rm -Rf pkg/#{version}") if File.exist?("pkg/#{version}")
  mkdir_p "pkg/#{version}"
  system("cp -R bin/mtasc* pkg/#{version}/")
  system("cp LICENSE pkg/#{version}/")
  system("cp LICENSE pkg/#{version}/")
  system("cp -R src/mtasc/std* pkg/#{version}/")
end

desc "Install MTASC to #{PREFIX}"
task :install => :compile do
  system("rm #{PREFIX}/bin/mtasc")
  system("cp bin/mtasc #{PREFIX}/bin/mtasc-#{version}")
  system("ln -s #{PREFIX}/bin/mtasc-#{version} #{PREFIX}/bin/mtasc")
  system("cp -R src/mtasc/std* #{PREFIX}/bin/")
end

task :default => :compile